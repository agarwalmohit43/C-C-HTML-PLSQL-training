DAY 1:
1.
*--COMMENT
SQL> declare
  2  --GO FOR VARIABLE
  3  BEGIN
  4  DBMS_OUTPUT.PUT_LINE('HELLO USER');
  5  END;
  6  /

PL/SQL procedure successfully completed.

SQL> SET SERVEROUTPUT ON;
SQL> /
HELLO USER

PL/SQL procedure successfully completed.


2.
DECLARE
V_DATE DATE;
V_DEPTNO NUMBER(2) NOT NULL:=10;
V_LOCATION VARCHAR2(20):='ATLANTA';
C_COMM CONSTANT NUMBER:=100;
V_SAL NUMBER(5) DEFAULT 200;
BEGIN
--DECLARE AS CONSTANT SO CANNOT CHANGE THE VALUE C_COMM:=500;
DBMS_OUTPUT.PUT_LINE(V_DATE);
DBMS_OUTPUT.PUT_LINE(V_LOCATION);
DBMS_OUTPUT.PUT_LINE(V_DEPTNO ||' '||C_COMM);
DBMS_OUTPUT.PUT_LINE(V_SAL);
END;
/
ATLANTA
10 100
200

PL/SQL procedure successfully completed.


3.
DECLARE
V_DATE DATE;
V_DEPTNO NUMBER(2) NOT NULL:=10;
V_LOCATION VARCHAR2(20):='ATLANTA';
C_COMM CONSTANT NUMBER:=100;
V_SAL NUMBER(5) DEFAULT 200;
BEGIN
--DECLARE AS CONSTANT SO CANNOT CHANGE THE VALUE C_COMM:=500;
V_SAL:=500;
DBMS_OUTPUT.PUT_LINE(V_DATE);
DBMS_OUTPUT.PUT_LINE(V_LOCATION);
DBMS_OUTPUT.PUT_LINE(V_DEPTNO ||' '||C_COMM);
DBMS_OUTPUT.PUT_LINE(V_SAL);
END;
/

ATLANTA
10 100
500

4.
DECLARE
V_DATE DATE;
V_DEPTNO NUMBER(2) NOT NULL:=&NUMB;
V_LOCATION VARCHAR2(20):='&LOC';
C_COMM CONSTANT NUMBER:=100;
V_SAL NUMBER(5) DEFAULT 200;
BEGIN
--DECLARE AS CONSTANT SO CANNOT CHANGE THE VALUE C_COMM:=500;
V_SAL:=500;
DBMS_OUTPUT.PUT_LINE(V_DATE);
DBMS_OUTPUT.PUT_LINE(V_LOCATION);
DBMS_OUTPUT.PUT_LINE(V_DEPTNO ||' '||C_COMM);
DBMS_OUTPUT.PUT_LINE(V_SAL);
END;
/
Enter value for numb: 50
old   3: V_DEPTNO NUMBER(2) NOT NULL:=&NUMB;
new   3: V_DEPTNO NUMBER(2) NOT NULL:=50;
Enter value for loc: 'PUNE'
old   4: V_LOCATION VARCHAR2(20):=&LOC;
new   4: V_LOCATION VARCHAR2(20):=PUNE;
PUNE
50 100
500

5. TO MATCH VARIABLE DATATYPE WITH TABLE COLUMN
DECLARE
V_SAL EMP.SAL%TYPE:=&SAL;
BEGIN
DBMS_OUTPUT.PUT_LINE('SALARY IS '||V_SAL);
END;
/
Enter value for sal: 500
old   2: V_SAL EMP.SAL%TYPE:=&SAL;
new   2: V_SAL EMP.SAL%TYPE:=500;
SALARY IS 500

PL/SQL procedure successfully completed.

6.
DECLARE
V_SAL EMP.SAL%TYPE;
BEGIN
SELECT SAL INTO V_SAL FROM EMP WHERE EMPNO=7902;
DBMS_OUTPUT.PUT_LINE('SALARY IS '||V_SAL);
END;
SALARY IS 3000

PL/SQL procedure successfully completed.

7.
DECLARE
V_SAL EMP.SAL%TYPE;
V_ENAME EMP.ENAME%TYPE;
BEGIN
SELECT SAL,ENAME INTO V_SAL,V_ENAME FROM EMP WHERE EMPNO=7902;
DBMS_OUTPUT.PUT_LINE('SALARY IS '||V_SAL);
DBMS_OUTPUT.PUT_LINE('NAME IS '||V_ENAME);
END;
O/P:
SALARY IS 3000
NAME IS FORD

8.
DECLARE
V_SAL EMP.SAL%TYPE;
V_ENAME EMP.ENAME%TYPE;
JOB EMP.JOB%TYPE;
MGR EMP.MGR%TYPE;
HIREDATE EMP.HIREDATE%TYPE;
COMM EMP.COMM%TYPE;
DEPTNO EMP.DEPTNO%TYPE;
BEGIN
SELECT ENAME,JOB,MGR,HIREDATE,SAL,COMM,DEPTNO INTO V_ENAME,JOB,MGR,HIREDATE,V_SAL,COMM,DEPTNO FROM EMP WHERE EMPNO=7902;
DBMS_OUTPUT.PUT_LINE('NAME IS '||V_ENAME);
DBMS_OUTPUT.PUT_LINE('JOB IS '||JOB);
DBMS_OUTPUT.PUT_LINE('MGR IS '||MGR);
DBMS_OUTPUT.PUT_LINE('HIREDATE IS '||HIREDATE);
DBMS_OUTPUT.PUT_LINE('SAL IS '||V_SAL);
DBMS_OUTPUT.PUT_LINE('COMM IS '||COMM);
DBMS_OUTPUT.PUT_LINE('DEPTNO IS '||DEPTNO);
END;
O/P:
NAME IS FORD
JOB IS ANALYST
MGR IS 7566
HIREDATE IS 03-DEC-81
SAL IS 3000
COMM IS
DEPTNO IS 20

9.
DECLARE 
EMPVAR EMP%ROWTYPE;
BEGIN
SELECT * INTO EMPVAR FROM EMP WHERE EMPNO=7902;
DBMS_OUTPUT.PUT_LINE('NAME IS '||EMPVAR.ENAME);
DBMS_OUTPUT.PUT_LINE('JOB IS '||EMPVAR.JOB);
DBMS_OUTPUT.PUT_LINE('MGR IS '||EMPVAR.MGR);
DBMS_OUTPUT.PUT_LINE('HIREDATE IS '||EMPVAR.HIREDATE);
DBMS_OUTPUT.PUT_LINE('SAL IS '||EMPVAR.SAL);
DBMS_OUTPUT.PUT_LINE('COMM IS '||EMPVAR.COMM);
DBMS_OUTPUT.PUT_LINE('DEPTNO IS '||EMPVAR.DEPTNO);
END;
/
O/P:
NAME IS FORD
JOB IS ANALYST
MGR IS 7566
HIREDATE IS 03-DEC-81
SAL IS 3000
COMM IS
DEPTNO IS 20

10.
DECLARE 
TYPE MY_EMPTYPE IS RECORD(ENAME EMP.ENAME%TYPE,EMPNO EMP.EMPNO%TYPE,SAL EMP.SAL%TYPE,COMM EMP.COMM%TYPE);
V_MYVAR MY_EMPTYPE;
BEGIN
SELECT ENAME,EMPNO,SAL,COMM INTO V_MYVAR FROM EMP WHERE EMPNO=7902;
DBMS_OUTPUT.PUT_LINE('EMPNO IS '||V_MYVAR.EMPNO);
DBMS_OUTPUT.PUT_LINE('NAME IS '||V_MYVAR.ENAME);
DBMS_OUTPUT.PUT_LINE('SAL IS '||V_MYVAR.SAL);
DBMS_OUTPUT.PUT_LINE('COMM IS '||V_MYVAR.COMM);
END;
/
O/P:
EMPNO IS 7902
NAME IS FORD
SAL IS 3000
COMM IS

11.
DECLARE
TYPE MY_NAMES IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
V_NAMES MY_NAMES;
BEGIN
V_NAMES(1):='KISHOR SIR JI';
V_NAMES(2):='SHYAM';
DBMS_OUTPUT.PUT_LINE('FIRST NAME = '||V_NAMES(1));
DBMS_OUTPUT.PUT_LINE('FIRST NAME = '||V_NAMES(2));
END;
/
O/P:
FIRST NAME = KISHOR SIR JI
FIRST NAME = SHYAM

12.
DECLARE
TYPE MY_NAMES IS TABLE OF EMP%ROWTYPE INDEX BY BINARY_INTEGER;
V_NAMES MY_NAMES;
BEGIN
V_NAMES(1).ENAME:='CHOR';
V_NAMES(1).EMPNO:=10;
DBMS_OUTPUT.PUT_LINE('FIRST NAME = '||V_NAMES(1).ENAME);
DBMS_OUTPUT.PUT_LINE('EMPNO = '||V_NAMES(1).EMPNO);
END;
/
O/P:
FIRST NAME = CHOR
EMPNO = 10

12.
<<OUTER>>
DECLARE
V_NUM NUMBER(2):=10;
BEGIN
	<<INNER>>
	DECLARE
	V_NUM NUMBER(2):=1;
	BEGIN
		DBMS_OUTPUT.PUT_LINE('INNER BLOCK : '|| INNER.V_NUM);
		DBMS_OUTPUT.PUT_LINE('INNER BLOCK WITH GLOABLA VARIABLE : '|| OUTER.V_NUM);
	END;
V_NUM:=20;
DBMS_OUTPUT.PUT_LINE('OUTER BLOCK : '|| OUTER.V_NUM);
END;
/
O/P:
INNER BLOCK : 1
INNER BLOCK WITH GLOABLA VARIABLE : 10
OUTER BLOCK : 20

13.
DECLARE
V_SAL EMP.SAL%TYPE:=&SALARY;
BEGIN
	IF V_SAL>0 THEN
	UPDATE EMP SET SAL=V_SAL WHERE EMPNO=7902;
	ELSE
	DBMS_OUTPUT.PUT_LINE('-VE SAL NOT POSSIBLE');
	END IF;
END;
/
O/P:
Enter value for salary: 2300
old   2: V_SAL EMP.SAL%TYPE:=&SALARY;
new   2: V_SAL EMP.SAL%TYPE:=2300;

14.
DECLARE
V_SAL EMP.SAL%TYPE:=&SALARY;
BEGIN
	IF V_SAL>0 THEN
	UPDATE EMP SET SAL=V_SAL WHERE EMPNO=7902;
	ELSIF V_SAL>-100 THEN
		DBMS_OUTPUT.PUT_LINE('LOW');
	ELSE	
	DBMS_OUTPUT.PUT_LINE('-VE SAL NOT POSSIBLE');
	END IF;
END;
/

15.
DECLARE
	V_SAL EMP.SAL%TYPE:=&SALARY;
BEGIN
	LOOP
		DBMS_OUTPUT.PUT_LINE('HELLO');
		EXIT
	END LOOP;
END;
/

16.
DECLARE
	V_SAL EMP.SAL%TYPE:=0;
BEGIN
	LOOP
		DBMS_OUTPUT.PUT_LINE('HELLO');
		EXIT WHEN V_SAL>100;
		V_SAL:=V_SAL+10;
	END LOOP;
END;
/
O/P:
HELLO
HELLO
HELLO
HELLO
HELLO
HELLO
HELLO
HELLO
HELLO
HELLO
HELLO
HELLO

17.
DECLARE
	V_SAL EMP.SAL%TYPE:=0;
BEGIN
	FOR I IN 1..5
LOOP
	DBMS_OUTPUT.PUT_LINE('HI');
END LOOP;
	DBMS_OUTPUT.PUT_LINE('OUT OF THE LOOP');
END;
/
O/P:
HI
HI
HI
HI
HI
OUT OF THE LOOP

18.
DECLARE
	V_SAL EMP.SAL%TYPE:=0;
BEGIN
	FOR I IN 1..5
LOOP
	DBMS_OUTPUT.PUT_LINE('HI = '||I);
END LOOP;
	DBMS_OUTPUT.PUT_LINE('OUT OF THE LOOP');
END;
/
O/P:
HI = 1
HI = 2
HI = 3
HI = 4
HI = 5
OUT OF THE LOOP

19.
DECLARE
	V_SAL EMP.SAL%TYPE:=0;
BEGIN
		FOR I IN REVERSE 1..5
	LOOP
		DBMS_OUTPUT.PUT_LINE('HI = '||I);
		--EXIT WHEN I=3;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('OUT OF THE LOOP');
END;
/
HI = 5
HI = 4
HI = 3
HI = 2
HI = 1
OUT OF THE LOOP

20.
DECLARE
	I EMP.SAL%TYPE:=0;
BEGIN
		WHILE I<5
	LOOP
		DBMS_OUTPUT.PUT_LINE('HI = '||I);
		I:=I+1;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('OUT OF THE LOOP');
END;
/
O/P:
HI = 0
HI = 1
HI = 2
HI = 3
HI = 4
OUT OF THE LOOP

*******NOTES ON CURSOR*****
1. %ISOPEN-TRUE IF CURSOR IS OPEN
2. %ISFOUND-IF IT RETURNS ROWS THEN TRUE
3. %NOTFOUND-IF IT DOWSNOT RETURNS ROWS THEN TRUE
4. %COUNT-VALUE GET INCREMENT AFTER EACH ROW FETCHED;
***************************

21.
DECLARE
CURSOR C_EMP IS SELECT * FROM EMP;--DECLARE CURSOR
BEGIN
OPEN C_EMP;--OPEN CURSOR
IF C_EMP%ISOPEN THEN
DBMS_OUTPUT.PUT_LINE('CURSOR IS OPEN');
CLOSE C_EMP;--CLOSE CURSOR
END IF;
END;
/
O/P:CURSOR IS OPEN

22.
DECLARE
V_EMP EMP%ROWTYPE;
CURSOR C_EMP IS SELECT * FROM EMP;--DECLARE CURSOR
BEGIN
OPEN C_EMP;--OPEN CURSOR
IF C_EMP%ISOPEN THEN
LOOP
FETCH C_EMP INTO V_EMP;
EXIT WHEN C_EMP%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(V_EMP.EMPNO||' COUNT= '|| C_EMP%ROWCOUNT);
END LOOP;
CLOSE C_EMP;--CLOSE CURSOR
END IF;
END;
/
O/P: SUCCESS :)

23.
DECLARE
V_EMP EMP.ENAME%TYPE;
DLOC DEPT.LOC%TYPE;
CURSOR C_EMP IS SELECT ENAME,LOC FROM EMP,DEPT WHERE EMP.DEPTNO=DEPT.DEPTNO;--DECLARE CURSOR
BEGIN
OPEN C_EMP;--OPEN CURSOR
IF C_EMP%ISOPEN THEN
LOOP
FETCH C_EMP INTO V_EMP,DLOC;
EXIT WHEN C_EMP%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(V_EMP||' WORKS IN '|| DLOC);
END LOOP;
CLOSE C_EMP;--CLOSE CURSOR
END IF;
END;
/

DECLARE
COUNTS NUMBER(2);
CURSOR C_EMP IS SELECT COUNT(*) FROM EMP WHERE EMP.DEPTNO=10;--DECLARE CURSOR
BEGIN
OPEN C_EMP;--OPEN CURSOR
IF C_EMP%ISOPEN THEN
LOOP
FETCH C_EMP INTO COUNTS;
EXIT WHEN C_EMP%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(COUNTS);
END LOOP;
CLOSE C_EMP;--CLOSE CURSOR
END IF;
END;
/

DECLARE

CURSOR C_EMP IS SELECT EMPNO FROM EMP WHERE EMP.DEPTNO=10;--DECLARE CURSOR
BEGIN
FOR MYVAR IN C_EMP
LOOP
DBMS_OUTPUT.PUT_LINE('TOTAL NO OF PEOPLE: '||MYVAR.EMPNO);
END LOOP;
END;
/

DECLARE
COUNTS NUMBER(2);
CURSOR C_EMP(V_DEPTNO NUMBER) IS SELECT COUNT(*) FROM EMP WHERE EMP.DEPTNO=V_DEPTNO;--DECLARE CURSOR
BEGIN
OPEN C_EMP(&DEPTNO);--OPEN CURSOR
IF C_EMP%ISOPEN THEN
LOOP
FETCH C_EMP INTO COUNTS;
EXIT WHEN C_EMP%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(COUNTS);
END LOOP;
CLOSE C_EMP;--CLOSE CURSOR
END IF;
END;
/
O/P:
Enter value for deptno: 10
old   5: OPEN C_EMP(&DEPTNO);--OPEN CURSOR
new   5: OPEN C_EMP(10);--OPEN CURSOR
18

FOR WAIT
DECLARE
CURSOR MOHIT IS SELECT * FROM EMP FOR UPDATE OF DEPTNO NOWAIT;
V_EMP EMP%ROWTYPE;
BEGIN
OPEN MOHIT;
IF MOHIT%ISOPEN THEN
LOOP
FETCH MOHIT INTO V_EMP;
EXIT WHEN MOHIT%NOTFOUND;
UPDATE EMP SET SAL=&SAL WHERE CURRENT OF MOHIT;
END LOOP;
CLOSE MOHIT;--CLOSE CURSOR
END IF;
END;
/

MULTIPLE CURSOR SOLN
DECLARE
TYPE MYCURSOR IS REF CURSOR;
CURS1 MYCURSOR;
NAME EMP.ENAME%TYPE;
SAL EMP.SAL%TYPE;
COMM EMP.COMM%TYPE;
BEGIN
OPEN CURS1 FOR SELECT ENAME FROM EMP WHERE DEPTNO=10;
IF CURS1%ISOPEN THEN
LOOP
FETCH CURS1 INTO NAME;
EXIT WHEN CURS1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(NAME);
END LOOP;
CLOSE CURS1;
END IF;

OPEN CURS1 FOR SELECT SAL,COMM FROM EMP WHERE EMPNO=7521;
IF CURS1%ISOPEN THEN
LOOP
FETCH CURS1 INTO SAL,COMM;
EXIT WHEN CURS1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(SAL||' AND COMM IS '||COMM);
END LOOP;
CLOSE CURS1;
END IF;
END;
/

DAY 2:
USERINPUT CALL
1. 
DECLARE
SAL EMP.SAL%TYPE;
CURSOR C_EMP IS SELECT SAL FROM EMP WHERE EMP.EMPNO=&EMPNO;--DECLARE CURSOR
BEGIN
OPEN C_EMP;--OPEN CURSOR
IF C_EMP%ISOPEN THEN
LOOP
FETCH C_EMP INTO SAL;
EXIT WHEN C_EMP%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(' SALARY= '|| SAL);
END LOOP;
CLOSE C_EMP;--CLOSE CURSOR
END IF;
END;
/
O/P:
Enter value for empno: 7902
old   3: CURSOR C_EMP IS SELECT SAL FROM EMP WHERE EMP.EMPNO=&EMPNO;--DECLARE CURSOR
new   3: CURSOR C_EMP IS SELECT SAL FROM EMP WHERE EMP.EMPNO=7902;--DECLARE CURSOR
SALARY= 3000

EXCEPTION HANDLING
2.
DECLARE
SAL EMP.SAL%TYPE;
BEGIN
SELECT SAL INTO SAL FROM EMP WHERE EMPNO=&EMPNO;
DBMS_OUTPUT.PUT_LINE('SALARY IS='||SAL);
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND');
END;
/
O/P:
Enter value for empno: 8888
old   4: SELECT SAL INTO SAL FROM EMP WHERE EMPNO=&EMPNO;
new   4: SELECT SAL INTO SAL FROM EMP WHERE EMPNO=8888;
NO RECORD FOUND

3.
DECLARE
--DECLARATION BLOCK
SAL EMP.SAL%TYPE;
DONTHAVE_DATA EXCEPTION;
PRAGMA EXCEPTION_INIT(DONTHAVE_DATA,+100);
BEGIN
SELECT SAL INTO SAL FROM EMP WHERE EMPNO=&EMPNO;
DBMS_OUTPUT.PUT_LINE('SALARY IS='||SAL);
EXCEPTION 
	WHEN DONTHAVE_DATA THEN
		DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND');
END;
/
NO RECORD FOUND

USER DEFINED
4.
DECLARE
 --DECLARATION BLOCK
 ED_SAL EMP.SAL%TYPE;
EMPNOS EMP.EMPNO%TYPE:=&EMPNO;
 DONTHAVE_DATA EXCEPTION;
 PRAGMA EXCEPTION_INIT(DONTHAVE_DATA,+100);
BEGIN
SELECT SAL INTO ED_SAL FROM EMP WHERE EMPNO=EMPNOS;
DBMS_OUTPUT.PUT_LINE('SALARY IS='||ED_SAL);
 EXCEPTION
 WHEN DONTHAVE_DATA THEN
  DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND '||EMPNOS);
  END;
 /
Enter value for empno: 8888
old   4: EMPNOS EMP.EMPNO%TYPE:=&EMPNO;
new   4: EMPNOS EMP.EMPNO%TYPE:=8888;
NO RECORD FOUND8888

PL/SQL procedure successfully completed.

5.
DECLARE
 --DECLARATION BLOCK
V_SAL EMP.SAL%TYPE:=&SAL;
EMPNOS EMP.EMPNO%TYPE:=&EMPNO;
 NEGATIVE_SAL EXCEPTION;
 DONTHAVE_DATA EXCEPTION;
 PRAGMA EXCEPTION_INIT(DONTHAVE_DATA,+100);
BEGIN
UPDATE EMP SET SAL=V_SAL WHERE EMPNO=EMPNOS;
IF V_SAL <0 THEN
RAISE NEGATIVE_SAL;
END IF;
DBMS_OUTPUT.PUT_LINE('SALARY UPDATED SUCCESSFULLY FOR '||EMPNOS);
 EXCEPTION
 WHEN DONTHAVE_DATA THEN
  DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND '||EMPNOS);
WHEN NEGATIVE_SAL THEN
  DBMS_OUTPUT.PUT_LINE('SALARY CANNOT BE NEGATIVE');
  ROLLBACK;
  
 END;
 /
 
 OTHERS EXCEPTION
 6.
 DECLARE
 --DECLARATION BLOCK
 ED_SAL EMP.SAL%TYPE;
EMPNOS EMP.EMPNO%TYPE:=&EMPNO;
 DONTHAVE_DATA EXCEPTION;
 PRAGMA EXCEPTION_INIT(DONTHAVE_DATA,+100);
BEGIN
SELECT SAL INTO ED_SAL FROM EMP WHERE EMPNO=EMPNOS;
DBMS_OUTPUT.PUT_LINE('SALARY IS='||ED_SAL);
 EXCEPTION
 --WHEN DONTHAVE_DATA THEN
 -- DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND '||EMPNOS);
  WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('SOME OTHER EXCEPTION OCCURED');
  END;
 /
 
 error code	
 7.
  DECLARE
 --DECLARATION BLOCK
 ED_SAL EMP.SAL%TYPE;
EMPNOS EMP.EMPNO%TYPE:=&EMPNO;
 DONTHAVE_DATA EXCEPTION;
 PRAGMA EXCEPTION_INIT(DONTHAVE_DATA,+100);
BEGIN
SELECT SAL INTO ED_SAL FROM EMP WHERE EMPNO=EMPNOS;
DBMS_OUTPUT.PUT_LINE('SALARY IS='||ED_SAL);
 EXCEPTION
 --WHEN DONTHAVE_DATA THEN
 -- DBMS_OUTPUT.PUT_LINE('NO RECORD FOUND '||EMPNOS);
  WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('SOME OTHER EXCEPTION OCCURED'||SQLCODE);
  DBMS_OUTPUT.PUT_LINE(SQLERRM);
  END;
 /
 
 8.
 DECLARE
 V_COMM EMP.COMM%TYPE;
 BEGIN
 SELECT COMM INTO V_COMM FROM EMP WHERE EMPNO=7788; 
 IF V_COMM IS NULL THEN
	RAISE_APPLICATION_ERROR(-20101,'COMM NOT FOUND');
END IF;
DBMS_OUTPUT.PUT_LINE('COMM'||V_COMM);

END;
/
O/P:
 DECLARE
*
ERROR at line 1:
ORA-20101: COMM NOT FOUND
ORA-06512: at line 6

PROCEDURE
9.
CREATE OR REPLACE PROCEDURE P_DISPLAYSALARY(EMPNOS IN NUMBER)
AS
V_SAL EMP.SAL%TYPE;
BEGIN 
	SELECT SAL INTO V_SAL FROM EMP WHERE EMPNO=EMPNOS;
	DBMS_OUTPUT.PUT_LINE('SALARY IS '|| V_SAL);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE(EMPNOS||' NOT IN TABLE');
END P_DISPLAYSALARY;
/
O/P:
TO RUN PROCEDURE
1ST WAY FROM CMD
SQL> EXEC P_DISPLAYSALARY(7902);
SALARY IS 3000

2ND WAY WAY USING ANNOMYNOUS BLOCK
BEGIN
P_DISPLAYSALARY(7902);
END;
/

10.
CREATE OR REPLACE PROCEDURE P_DISPLAYSALARY(EMPNOS IN NUMBER,V_SAL OUT NUMBER)
AS
BEGIN 
	SELECT SAL INTO V_SAL FROM EMP WHERE EMPNO=EMPNOS;
	--DBMS_OUTPUT.PUT_LINE('SALARY IS '|| V_SAL);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE(EMPNOS||' NOT IN TABLE');
END P_DISPLAYSALARY;
/

DECLARE 
V_SAL NUMBER(10);
BEGIN
P_DISPLAYSALARY(7902,V_SAL);
DBMS_OUTPUT.PUT_LINE(V_SAL||' SALARY IS FROM CALLING SIDE');
END;
/

O/P:
3000 SALARY IS FROM CALLING SIDE

BINDING PROCESS:
11.
VARIABLE V_SAL NUMBER;
EXEC P_DISPLAYSALARY(7902,:V_SAL);

SQL procedure successfully completed.

PRINT V_SAL;

 V_SAL
------
  3000
  
12.
CREATE OR REPLACE PROCEDURE P_DISPLAYSALARY(EMPNOS IN OUT NUMBER)
AS
BEGIN 
	SELECT SAL INTO EMPNOS FROM EMP WHERE EMPNO=EMPNOS;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE(EMPNOS||' NOT IN TABLE');
END P_DISPLAYSALARY;
/

DECLARE
EMPNOS NUMBER(10):=&EMPNO;
BEGIN
P_DISPLAYSALARY(EMPNOS);
DBMS_OUTPUT.PUT_LINE('SALARY ='||EMPNOS);
END;
/
O/P:
Enter value for empno: 7902
old   2: EMPNOS NUMBER(10):=&EMPNO;
new   2: EMPNOS NUMBER(10):=7902;
SALARY =3000

FUNCTION
13.
CREATE OR REPLACE FUNCTION F_GETSALARY(EMPNOS NUMBER)
RETURN NUMBER
AS
V_SAL EMP.SAL%TYPE;
BEGIN
SELECT SAL INTO V_SAL FROM EMP WHERE EMPNO=EMPNOS;
RETURN V_SAL;
EXCEPTION
WHEN NO_DATA_FOUND THEN
	DBMS_OUTPUT.PUT_LINE('NO DATA FOUND'||EMPNOS);
END;
/

DECLARE
SAL NUMBER(10);
BEGIN
SAL:=F_GETSALARY(7902);
DBMS_OUTPUT.PUT_LINE(SAL||' SALARY');
END;
/

DECLARE
SAL NUMBER(10);
EMPNO EMP.EMPNO%TYPE:=&EMPNO;
BEGIN
SAL:=F_GETSALARY(EMPNO);
DBMS_OUTPUT.PUT_LINE(SAL||' SALARY');
END;
/
O/P:
3000 SALARY

14.QUESTION
CREATE OR REPLACE FUNCTION F_GETDEPARTMENTNAME(EMPNOS NUMBER)
RETURN VARCHAR2
AS
DNAMES DEPT.DNAME%TYPE;
BEGIN
SELECT DNAME INTO DNAMES FROM DEPT WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE EMPNO=EMPNOS);
RETURN DNAMES;
EXCEPTION
WHEN NO_DATA_FOUND THEN
	DBMS_OUTPUT.PUT_LINE('NO DATA FOUND'||EMPNOS);
END;
/

DECLARE
EMPNO EMP.EMPNO%TYPE:=&EMPNO;
DNAME VARCHAR2(20);
BEGIN
DNAME:=F_GETDEPARTMENTNAME(EMPNO);
DBMS_OUTPUT.PUT_LINE('DNAME OF '||EMPNO||' IS '||DNAME);
END;
/

O/P:
DNAME OF 7902 IS RESEARCH

USING CURSOR

CREATE OR REPLACE FUNCTION F_GETDEPARTMENTNAME(EMPNOS NUMBER)
RETURN VARCHAR2
AS
DNAMES DEPT.DNAME%TYPE;
CURSOR C_EMP IS SELECT DNAME INTO DNAMES FROM DEPT WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE EMPNO=EMPNOS);
BEGIN
OPEN C_EMP;--OPEN CURSOR
IF C_EMP%ISOPEN THEN
FETCH C_EMP INTO DNAMES;
RETURN DNAMES;
CLOSE C_EMP;--CLOSE CURSOR
END IF;
END F_GETDEPARTMENTNAME;
/

DECLARE
DNAME VARCHAR2(20);
EMPNO EMP.EMPNO%TYPE:=&EMPNO;
BEGIN
DNAME:=F_GETDEPARTMENTNAME(EMPNO);
DBMS_OUTPUT.PUT_LINE('DNAME OF '||EMPNO||' IS '||DNAME);
END;
/
O/P:
DNAME OF 7902 IS RESEARCH

PACKAGE
1.
CREATE OR REPLACE PACKAGE MYPACK AS
G_SAL EMP.SAL%TYPE;
FUNCTION F_GETSALARY(L_EMPNO NUMBER)RETURN NUMBER;
PROCEDURE P_GETSALARY(L_EMPNO NUMBER);
END MYPACK;
/

CREATE OR REPLACE PACKAGE BODY MYPACK AS
FUNCTION F_GETSALARY(L_EMPNO NUMBER)RETURN NUMBER
IS
BEGIN
SELECT SAL INTO G_SAL FROM EMP WHERE EMPNO=L_EMPNO;
RETURN G_SAL;
END F_GETSALARY;
PROCEDURE P_GETSALARY(L_EMPNO NUMBER)
IS
BEGIN
SELECT SAL INTO G_SAL FROM EMP WHERE EMPNO=L_EMPNO;
DBMS_OUTPUT.PUT_LINE('SALARY '||G_SAL);
END P_GETSALARY;
END MYPACK;
/


DECLARE
SAL NUMBER(10);
BEGIN
MYPACK.P_GETSALARY(7902);
SAL:=MYPACK.F_GETSALARY(7902);
DBMS_OUTPUT.PUT_LINE('SALARY '||SAL);
END;
/

O/P:
SALARY 3000
SALARY 3000

PRIVATE PROCEDURE CALLING
2.
CREATE OR REPLACE PACKAGE MYPACK AS
G_SAL EMP.SAL%TYPE;
FUNCTION F_GETSALARY(L_EMPNO NUMBER)RETURN NUMBER;
PROCEDURE P_GETSALARY(L_EMPNO NUMBER);
END MYPACK;
/

CREATE OR REPLACE PACKAGE BODY MYPACK AS
FUNCTION F_GETSALARY(L_EMPNO NUMBER)RETURN NUMBER
IS
BEGIN
SELECT SAL INTO G_SAL FROM EMP WHERE EMPNO=L_EMPNO;
RETURN G_SAL;
END F_GETSALARY;
PROCEDURE P_FOO
IS
BEGIN
DBMS_OUTPUT.PUT_LINE('PRIVATE PROCEDURE');
END P_FOO;
PROCEDURE P_GETSALARY(L_EMPNO NUMBER)
IS
BEGIN
SELECT SAL INTO G_SAL FROM EMP WHERE EMPNO=L_EMPNO;
DBMS_OUTPUT.PUT_LINE('SALARY '||G_SAL);
P_FOO();
END P_GETSALARY;


END MYPACK;
/


DECLARE
SAL NUMBER(10);
BEGIN
MYPACK.P_GETSALARY(7902);
SAL:=MYPACK.F_GETSALARY(7902);
DBMS_OUTPUT.PUT_LINE('SALARY '||SAL);
END;
/

**IF WE DONOT DEFINE IN SPEFICATION ANY FUNCTION THEN WE CAN'T ACCESS IT**

AUTONOMUS TRANSACTION
1.
CREATE OR REPLACE PROCEDURE P_INSERT
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
INSERT INTO EMP(EMPNO,SAL) VALUES (104,2000);
COMMIT;
END P_INSERT;
/

BEGIN
INSERT INTO EMP(EMPNO,SAL) VALUES (105,1000);
P_INSERT();
ROLLBACK;
END;
/ 

DAY 3:
TRIGGER
A.STATEMENT LEVEL TRIGGER
B.ROW LEVEL TRIGGER
1.A
CREATE OR REPLACE TRIGGER T1
BEFORE INSERT OR DELETE ON EMP
BEGIN
DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP');
END T1;
/
O/P:
SQL> DELETE FROM EMP WHERE EMPNO=7902;
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP

2.B
CREATE OR REPLACE TRIGGER T1
BEFORE INSERT OR DELETE ON EMP
FOR EACH ROW--NOW ITS A ROW LEVEL TRIGGER
BEGIN
DBMS_OUTPUT.PUT_LINE('YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP');
END T1;
/
O/P:

SQL> DELETE FROM EMP;
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP
YOU ARE INSERTING OR DELETING RECORD IN A TABLE EMP

3.OLD NEW RULES
CREATE TABLE SALARY AS SELECT SAL FROM EMP WHERE 2=1;

CREATE OR REPLACE TRIGGER T2
AFTER UPDATE OF SAL ON EMP
FOR EACH ROW--NOW ITS A ROW LEVEL TRIGGER
BEGIN
DBMS_OUTPUT.PUT_LINE(:OLD.SAL ||' = NEW IS ='||:NEW.SAL);
INSERT INTO SALARY(SAL)VALUES(:OLD.SAL);
END T2;
/
O/P:
3000 = NEW IS =6000
3000 = NEW IS =6000
3000 = NEW IS =6000

4.
CREATE OR REPLACE TRIGGER T2
AFTER UPDATE OF SAL ON EMP
FOR EACH ROW--NOW ITS A ROW LEVEL TRIGGER
WHEN(NEW.SAL>2000)
BEGIN
DBMS_OUTPUT.PUT_LINE(:OLD.SAL ||' = NEW IS ='||:NEW.SAL);
INSERT INTO SALARY(SAL)VALUES(:OLD.SAL);
END T2;
/

